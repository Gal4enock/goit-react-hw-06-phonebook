{"version":3,"sources":["ContactForm/ContactForm.module.css","Contacts/Contacts.module.css","App/App.module.css","redux/contacts/contactsActions.js","Contacts/Contacts.jsx","ContactForm/ContactForm.jsx","FilterContacts/FilterContacts.jsx","App/App.jsx","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","addContacts","createAction","name","number","payload","contact","id","uuidv4","handleDelete","nameId","handleFilter","filter","mapDispatchToProps","onDelete","contactsActions","connect","state","contacts","items","toLowerCase","includes","TransitionGroup","component","className","style","list","length","map","CSSTransition","timeout","classNames","item","onClick","type","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","toAddContacts","form","onSubmit","this","lable","input","onChange","Component","dispatch","toFilter","App","Style","Container","fontColor","createReducer","action","find","el","alert","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.031bb840.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__4p276\",\"lable\":\"ContactForm_lable__2lkWl\",\"form\":\"ContactForm_form__usJZm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Contacts_item__1eTEA\",\"list\":\"Contacts_list__3uTxf\",\"enter\":\"Contacts_enter__Bk3fJ\",\"enterActive\":\"Contacts_enterActive__1uJ-x\",\"exit\":\"Contacts_exit__KbTAa\",\"exitActive\":\"Contacts_exitActive__1pH7m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"App_appear__2WD57\",\"appearActive\":\"App_appearActive__bw_-U\",\"fontColor\":\"App_fontColor__2g2CM\",\"Container\":\"App_Container__2EnEm\",\"enter\":\"App_enter__xnL8V\",\"enterActive\":\"App_enterActive__1s0W3\",\"exit\":\"App_exit__gXY8x\",\"exitActive\":\"App_exitActive__1BHvr\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n// import constants from '../constants.js';\r\n\r\nconst addContacts = createAction('contact/add', (name, number) => {\r\n  return {\r\n    payload: {\r\n      contact: {\r\n        name,\r\n        id: uuidv4(),\r\n        number\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nconst handleDelete = createAction('contact/del', nameId => ({payload: {id: nameId}}))\r\n\r\nconst handleFilter = createAction('contact/filter', filter=> ({payload: {filter}}) )\r\n\r\n\r\nexport default {\r\n  addContacts,\r\n  handleDelete,\r\n  handleFilter\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactsActions from '../redux/contacts/contactsActions.js';\r\n\r\nimport style from \"./Contacts.module.css\";\r\n\r\nconst Contacts = function ({contacts, onDelete}) {\r\n  return (<TransitionGroup\r\n    component=\"ul\"\r\n    className={style.list}>\r\n    {contacts.length ? contacts.map(contact =>\r\n      <CSSTransition\r\n        key={contact.id}\r\n        timeout={250}\r\n        classNames={style} >\r\n        <li className={style.item}\r\n          key={contact.id}>{contact.name}: {contact.number}\r\n          <button onClick={() => onDelete(contact.id)} type='button'>Delete</button> </li></CSSTransition>) : []}\r\n  </TransitionGroup>)\r\n}\r\n\r\nContacts.propTypes = {\r\n  contacts:  PropTypes.array.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const filteredNames = state.contacts.items.filter(contact => contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase()) )\r\n  return {\r\n    contacts: filteredNames\r\n  }\r\n};\r\nconst mapDispatchToProps = {\r\n  onDelete: contactsActions.handleDelete,\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../redux/contacts/contactsActions';\r\n\r\nimport style from './ContactForm.module.css'\r\n\r\n\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.toAddContacts(this.state.name, this.state.number);\r\n    this.setState({\r\n      name: '',\r\n      number: ''\r\n    })\r\n   }\r\n  render() {\r\n    return ( <form className={style.form} onSubmit={this.handleSubmit}>\r\n      <label className={style.lable}>\r\n        Name\r\n      <input className={style.input} name=\"name\" type=\"text\" value={this.state.name} onChange={this.handleChange} />\r\n      </label>\r\n      <label className={style.lable}>\r\n        Number\r\n      <input className={style.input} name=\"number\" type=\"phone\" value={this.state.number} onChange={this.handleChange} />\r\n        <button type=\"submit\">Add contact</button>\r\n      </label>\r\n    </form>)\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  // const { name, number } = this.state\r\n  return {\r\n    toAddContacts: (name, number) => dispatch(contactsActions.addContacts(name, number)),\r\n  }\r\n}\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from '../redux/contacts/contactsActions.js';\r\n\r\nconst Filter = ({ value, toFilter }) =>  (\r\n    <div>\r\n    <input\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={value}\r\n      onChange={e => toFilter(e.target.value)} />\r\n    </div>\r\n  )\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  toFilter: PropTypes.func,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  toFilter: contactsActions.handleFilter,\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)","import React from 'react';\n\nimport Contacts from '../Contacts/Contacts';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../FilterContacts/FilterContacts';\n\nimport Style from './App.module.css'\n\n\nconst App = function () {\n    \n    return (\n      <div className={Style.Container}>\n        \n        <h1 className={Style.fontColor}>Phonebook</h1>\n        <ContactForm />\n        <h2>Find contacts by name</h2>\n        <Filter />\n        <Contacts />\n      </div>\n    )\n  \n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsActions from './contactsActions.js';\r\n\r\nconst toAddContact = (state, action) => {\r\n  const doubleName = state.find(el => el.name === action.payload.contact.name);\r\n    if (doubleName) {\r\n      alert(`${action.payload.contact.name} is already in contacts`);\r\n      return\r\n    }\r\n  return [...state, action.payload.contact];\r\n}\r\nconst toFilterContact = (state, action) => state.filter(contact => contact.id !== action.payload.id);\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.addContacts.type]: toAddContact,\r\n  [contactsActions.handleDelete.type]: toFilterContact\r\n})\r\n\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.handleFilter.type]: (state, action) => action.payload.filter\r\n})\r\n\r\nexport default combineReducers ({items, filter})\r\n\r\n\r\n","\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contactsReducer';\r\n\r\n \r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  }\r\n})\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App/App';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}